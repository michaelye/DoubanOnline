package com.michael.doubanonline;

import java.util.ArrayList;

import roboguice.inject.InjectView;
import android.content.Context;
import android.content.Intent;
import android.os.AsyncTask;
import android.os.Bundle;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.ArrayAdapter;
import android.widget.FrameLayout;
import android.widget.ListView;
import android.widget.RelativeLayout;
import android.widget.TextView;

import com.actionbarsherlock.app.ActionBar;
import com.michael.doubanonline.base.ShareActionBarActivity;
import com.michael.doubanonline.bean.Photo;
import com.michael.doubanonline.component.DialogUtil;
import com.michael.doubanonline.component.PullToRefreshListViewWithFooter;
import com.michael.doubanonline.component.PullToRefreshListViewWithFooter.OnFooterListViewLastItemVisibleListener;
import com.michael.doubanonline.component.PullToRefreshListViewWithFooter.OnFooterListViewRefreshListener;
import com.michael.doubanonline.util.L;
import com.michael.doubanonline.util.ToastUtil;

/**
 * 从主界面跳转进来的线上活动详细界面
 * 
 * */
public class OnlineDetailActivity extends ShareActionBarActivity implements ActionBar.OnNavigationListener{
	
	/** 接收传递进来的线上活动的ID，ID为String类型*/
	public static final String INTENT_KEY_ID = "INTENT_KEY_ID";
	/** 接收传递进来的线上活动的标题*/
	public static final String INTENT_KEY_TITLE = "INTENT_KEY_TITLE";
	/** 接收传递进来的线上活动的内容简介*/
	public static final String INTENT_KEY_DETAIL = "INTENT_KEY_DETAIL";
	/** 具有下来刷新和显示更多功能的ListView*/
	private PullToRefreshListViewWithFooter lvImages;
	/** 显示线上活动的标题和内容的ListView的header部分*/
	private View headerView;
	/** 数据源适配器*/
	private OnlineDetailAdapter adapter;
	/** 存放照片数据源的ArrayList*/
	private ArrayList<Photo> photos;
	/** 当前线上活动的id*/
	public static String id;
	
	/** 访问图片的线程*/
	private Task_GetOnlinePhotos task;
//	/** 用来控制本次请求是加载更多还是下拉刷新，true表示是下拉刷新*/
//	private boolean isRefresh = false;
	
	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_detail);
		
		setActionBar();
		iniListViewHeader();
		iniComponent();
		photos = new ArrayList<Photo>();
		adapter = new OnlineDetailAdapter(this, photos);
		lvImages.setAdapter(adapter);
		iniListener();
		Intent intent = getIntent();
		setListViewHeaderContent(intent.getStringExtra(INTENT_KEY_TITLE), intent.getStringExtra(INTENT_KEY_DETAIL));
		id = intent.getStringExtra(INTENT_KEY_ID);
	}
	
	private void iniComponent()
	{
		lvImages = (PullToRefreshListViewWithFooter)findViewById(R.id.lv_list);
	}
	
	private void iniListener(){
		
		//下拉刷新
		lvImages.setOnFooterListViewRefreshListener(new OnFooterListViewRefreshListener() {
			
			@Override
			public void onFooterListViewRefresh() {
				
				if(task != null && task.getStatus() == AsyncTask.Status.FINISHED){
					
//					isRefresh = true;
					getPhotos(id, 0, UrlUtil.DEFAULT_COUNT_VALUE, UrlUtil.getSortby(), true, true);
				}
			}
		});
		
		//显示更多
		lvImages.setOnFooterListViewLastItemVisibleListener(new OnFooterListViewLastItemVisibleListener() {
			
			@Override
			public void onFooterListViewLastItemVisible() {

				if(UrlUtil.getStart(photos) == UrlUtil.getTotalValue()){

					lvImages.setListViewFooterContent(PullToRefreshListViewWithFooter.LOADING_STATE_DONE, "加载完毕:"+UrlUtil.getTotalValue());
				}else{//TODO (getStart() < total)这样更安全
					
					if(task != null && task.getStatus() == AsyncTask.Status.FINISHED){
						
						getPhotos(id, UrlUtil.getStart(photos), UrlUtil.getCount(photos), UrlUtil.getSortby(), false, false);
					}
				}
			}
		});
	}
	
	/**
	 * 设置头部
	 * 
	 * */
	private void setActionBar() {

		ActionBar actionBar = getSupportActionBar();
		Context context = actionBar.getThemedContext();
		ArrayAdapter<CharSequence> list = ArrayAdapter.createFromResource(context, R.array.detail_titles, R.layout.sherlock_spinner_item);
		list.setDropDownViewResource(R.layout.list_action_bar_item);
		actionBar.setNavigationMode(ActionBar.NAVIGATION_MODE_LIST);
		actionBar.setListNavigationCallbacks(list, this);
		actionBar.setDisplayOptions(ActionBar.DISPLAY_SHOW_HOME);
		actionBar.setDisplayHomeAsUpEnabled(true);//让icon可以点击，并在icon的右边加上一个<箭头在onMenuItemSelected方法中被监听
		actionBar.setBackgroundDrawable(context.getResources().getDrawable(R.drawable.action_bar_bg));
		actionBar.setDisplayShowCustomEnabled(true);
	}

	/**
	 * 根据Id获取图片列表
	 * 
	 * @param id 
	 * @param start 要获取图片的起始索引
	 * @param count 本次请求要获取图片的数量
	 * @param sortby 排序规则
	 * @param isRefresh 是否刷新
	 * @param isClearList 是否清除ListView中的数据
	 */
	private void getPhotos(String id, int start, int count, int sortby, final boolean isRefresh, final boolean isClearList){
		
		if(task != null && task.getStatus() == AsyncTask.Status.RUNNING){//防止多个线程同时运行着
			
			return;
		}
		
		if(isRefresh){//如果是当前的线程是下拉刷新，则显示正在加载
			
			lvImages.setListViewFooterContent(PullToRefreshListViewWithFooter.LOADING_STATE_LOADING);
		}else{//如果是加载更多，则显示加载的数量
			
			lvImages.setListViewFooterContent(PullToRefreshListViewWithFooter.LOADING_STATE_LOADING, new StringBuilder("加载中...(").append(UrlUtil.getStart(photos)).append("/").append(UrlUtil.getTotalValue()).append(")").toString());
		}
		
		setRefreshState(true);
		task = new Task_GetOnlinePhotos(this, id, start, count, sortby, isRefresh, new TaskBackCaller<RemoteData<Photo>>() {
			
			@Override
			public void onResultReturn(RemoteData<Photo> result) {
				if(result.isOK() || RemoteData.FLAG_NO_NET_WORK.equals(result.flag)){
					
					if(isClearList){//如果是重新刷新
						
						photos.clear();
					}
					if(result.data != null){
						
						UrlUtil.setTotalValue(result.total);//获得服务器上所有图片的数量
						photos.addAll(result.data);
					}
					adapter.notifyDataSetChanged();
					
					if(RemoteData.FLAG_NO_NET_WORK.equals(result.flag)){
						
						ToastUtil.show("网络不给力啊");
					}
					
					lvImages.setListViewFooterContent(PullToRefreshListViewWithFooter.LOADING_STATE_DONE);
				}else{
					
					ToastUtil.show("获取数据失败，请重试");
					L.e("ERROR："+result.flag);
					lvImages.setListViewFooterContent(PullToRefreshListViewWithFooter.LOADING_STATE_FAIL);
				}
				lvImages.onRefreshComplete();//恢复下拉刷新的状态
				setRefreshState(false);
			}
		});
		task.execute();
	}

	/**
	 * 初始化ListView的Header
	 * */
	private void iniListViewHeader(){
		
		LayoutInflater layoutInflater = this.getLayoutInflater();
		headerView = (View)layoutInflater.inflate(R.layout.list_header_detail, null);
		TextView tvTitle = (TextView)headerView.findViewById(R.id.tv_title);
		tvTitle.setClickable(true);
		RelativeLayout rlDetail = (RelativeLayout)headerView.findViewById(R.id.rl_detail);
		rlDetail.setOnClickListener(new OnClickListener() {
			
			@Override
			public void onClick(View v) {

				showDialog();
			}
		});
		//PullToRefreshListView实际上是extends LinearLayout，里面是两个FrameLayout，
		//通过两个for循环，找到ListView是第二个FrameLayout的第一个child
		for(int i = 0; i < lvImages.getChildCount(); i++){
			
			FrameLayout view = ((FrameLayout)lvImages.getChildAt(i));
			for(int j = 0; j < view.getChildCount(); j++){
				L.d("type:"+j, view.getChildAt(j).getClass()+"");
				if(view.getChildAt(j) instanceof ListView){
					
					L.e("child:"+i, ""+j);
				}
			}
		}
		((ListView)(((FrameLayout)lvImages.getChildAt(1)).getChildAt(0))).addHeaderView(headerView);//找到下来刷新控件中的ListView，addHeadView
	}
	
	/**
	 * 设置ListView的Header，设置标题和内容
	 * */
	private void setListViewHeaderContent(String title, String detail){
		
		TextView tvTitle = (TextView)headerView.findViewById(R.id.tv_title);
		TextView tvDetail = (TextView)headerView.findViewById(R.id.tv_detail);
		tvTitle.setText(title);
		tvDetail.setText(detail);
	}
	
	
	/**
	 * 处理导航项的点击事件
	 * 默认就会进行调用
	 * 
	 * */
	@Override
	public boolean onNavigationItemSelected(int itemPosition, long itemId) {

		switch (itemPosition) {
		case 0://按时间排序
			
			UrlUtil.setSortby(Task_GetOnlinePhotos.SORT_BY_TIME);
			break;
		case 1://按热度排序
			
			UrlUtil.setSortby(Task_GetOnlinePhotos.SORT_BY_VOTE);
			break;
		default:
			break;
		}
		getPhotos(id, 0, UrlUtil.DEFAULT_COUNT_VALUE, UrlUtil.getSortby(), false, true);
		return true;
	}
	
	
	
	/**
	 * 根据Intent传递进来的title和detail内容显示对话框
	 * */
	private void showDialog(){

		Intent intent = getIntent();
		String title = intent.getStringExtra(INTENT_KEY_TITLE);
		String message = intent.getStringExtra(INTENT_KEY_DETAIL);
		DialogUtil.show(this, title, message);
	}

}
